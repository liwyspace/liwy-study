<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util.xsd">

    <!-- 通过构造方法注入 -->
    <bean id="iocBean" class="com.liwy.study.spring.spring4.bean.IocBean">
        <!-- 不存在歧义的不同类型，不需要指定索引或类型，按顺序匹配
		<constructor-arg ref="bar" />
		<constructor-arg ref="baz" />
		-->

        <!-- 当使用简单的类型的时候，容器无法判断类型，需要指定类型
        <constructor-arg type="int" value="21" />
        <constructor-arg type="java.lang.String" value="112255" />
        -->

        <!-- 或指定索引匹配
        <constructor-arg index="0" value="7500000" />
        <constructor-arg index="1" value="42" />
        -->

        <!-- 也可以通过参数名匹配， 如果使用name必须启用调试标记编译或使用@ConstructorProperties注解来显式声明构造函数的名称-->
        <constructor-arg name="name" value="7500000"/>
        <constructor-arg name="id" value="42"/>

    </bean>

    <bean id="instansBean" class="com.liwy.study.spring.spring4.bean.InstansBean">
        <constructor-arg value="liwy"/>
    </bean>
    <!--通过set方法注入-->
    <bean id="iocBean2" class="com.liwy.study.spring.spring4.bean.IocBean">
        <!--
        <property name="instansBean">
            <ref bean="instansBean" />
        </property>
        -->

        <property name="instansBean" ref="instansBean"/>

        <!-- 基本值通过value指定具体值
        <property name="id" value="1" />
        -->
    </bean>


    <!--基础值-->
    <bean id="propertyBean" class="com.liwy.study.spring.spring4.bean.PropertyBean">
        <property name="id" value="1"/>
        <property name="name" value="liwy"/>
    </bean>
    <!--property类型值-->
    <bean id="propertyBean2" class="com.liwy.study.spring.spring4.bean.PropertyBean">
        <property name="properties">
            <value>
                type=1
                typename=liwy2
            </value>
        </property>
    </bean>
    <!--其他bean-->
    <bean id="propertyBean3" class="com.liwy.study.spring.spring4.bean.PropertyBean">
        <property name="iocBean" ref="iocBean2"/>
    </bean>
    <!--内部bean-->
    <bean id="propertyBean4" class="com.liwy.study.spring.spring4.bean.PropertyBean">
        <property name="iocBean">
            <bean class="com.liwy.study.spring.spring4.bean.IocBean">
                <property name="id" value="5"/>
                <property name="name" value="iocName"/>
            </bean>
        </property>
    </bean>
    <!--集合-->
    <bean id="propertyBean5" class="com.liwy.study.spring.spring4.bean.PropertyBean">
        <!-- results in a setAdminEmails(java.util.Properties) call -->
        <property name="properties">
            <props>
                <prop key="administrator">administrator@example.org</prop>
                <prop key="support">support@example.org</prop>
                <prop key="development">development@example.org</prop>
            </props>
        </property>
        <property name="nameList">
            <list>
                <value>wenyao</value>
                <value>yyyy</value>
            </list>
        </property>
        <property name="nameMap">
            <map>
                <entry key="1" value="wwww"/>
                <entry key="2" value="yyyao"/>
            </map>
        </property>
        <property name="nameSet">
            <set>
                <value>jdry11</value>
                <value>set222</value>
            </set>
        </property>
    </bean>
    <!--空字符串-->
    <bean id="propertyBean6" class="com.liwy.study.spring.spring4.bean.PropertyBean">
        <property name="name" value=""/>
    </bean>
    <!--NULL-->
    <bean id="propertyBean7" class="com.liwy.study.spring.spring4.bean.PropertyBean">
        <property name="name">
            <null/>
        </property>
    </bean>
    <!--复合属性, 注意iocBean不能为空-->
    <bean id="propertyBean8" class="com.liwy.study.spring.spring4.bean.PropertyBean">
        <property name="iocBean2.name" value="iocName111"/>
    </bean>
    <!--合并集合-->
    <bean id="parent" class="com.liwy.study.spring.spring4.bean.PropertyBean">
        <property name="properties">
            <props>
                <prop key="administrator">administrator@example.com</prop>
                <prop key="support">support@example.com</prop>
            </props>
        </property>
    </bean>
    <bean id="child" parent="parent">
        <property name="properties">
            <!-- the merge is specified on the child collection definition -->
            <props merge="true">
                <prop key="sales">sales@example.com</prop>
                <prop key="support">support@example.co.uk</prop>
            </props>
        </property>
    </bean>

    <!--使用P命名空间，简化属性-->
    <util:list id="nameList">
        <value>12122</value>
        <value>wenyao</value>
    </util:list>
    <bean id="propertyBean9" class="com.liwy.study.spring.spring4.bean.PropertyBean" p:id="2" p:name="liwy2"
          p:iocBean-ref="iocBean2" p:nameList-ref="nameList"/>
    <!--使用c命名空间，简化构造参数-->
    <bean id="instansBean9" class="com.liwy.study.spring.spring4.bean.InstansBean" c:name="liwy33"/>

    <!--延迟初始化bean，被引用的时候才会实例化-->
    <bean id="lazy" class="com.liwy.study.spring.spring4.bean.PropertyBean" lazy-init="true"/>
    <!-- 依赖属性，强迫依赖的Bean在引用之前就会初始化 -->
    <bean id="beanOne" class="com.liwy.study.spring.spring4.bean.PropertyBean" depends-on="iocBean2" />

</beans>