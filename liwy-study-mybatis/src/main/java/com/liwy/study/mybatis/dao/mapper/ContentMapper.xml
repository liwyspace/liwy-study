<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 通过namespace可以与接口类映射 -->
<mapper namespace="com.liwy.study.mybatis.dao.IContentDao">
    <!--开启二级缓存-->
    <!--映射语句文件中的所有 select 语句将会被缓存。-->
    <!--映射语句文件中的所有 insert,update 和 delete 语句会刷新缓存。-->
    <!--缓存会使用 Least Recently Used(LRU,最近最少使用的)算法来收回。-->
    <!--根据时间表(比如 no Flush Interval,没有刷新间隔), 缓存不会以任何时间顺序 来刷新。-->
    <!--缓存会存储列表集合或对象(无论查询方法返回什么)的 1024 个引用。-->
    <!--缓存会被视为是 read/write(可读/可写)的缓存,意味着对象检索不是共享的,而 且可以安全地被调用者修改,而不干扰其他调用者或线程所做的潜在修改。-->
    <cache/>

    <!--这个更高级的配置创建了一个 FIFO 缓存,并每隔 60 秒刷新,存数结果对象或列表的 512 个引用,而且返回的对象被认为是只读的,-->
    <!--因此在不同线程中的调用者之间修改它们会 导致冲突-->
    <!--可用的收回策略有:-->
    <!--LRU – 最近最少使用的:移除最长时间不被使用的对象。-->
    <!--FIFO – 先进先出:按对象进入缓存的顺序来移除它们。-->
    <!--SOFT – 软引用:移除基于垃圾回收器状态和软引用规则的对象。-->
    <!--WEAK – 弱引用:更积极地移除基于垃圾收集器状态和弱引用规则的对象。-->
    <!--<cache eviction="FIFO" flushInterval="60000" size="512" readOnly="true"/>-->

    <!--也可以通过实现你自己的缓存或为其他第三方缓存方案 创建适配器来完全覆盖缓存行为-->
    <!--<cache type="com.domain.something.MyCustomCache"/>-->


    <!--如果你的数据库支持自动生成主键的字段（比如 MySQL 和 SQL Server），那么你可以设置 useGeneratedKeys=”true”，然后再把 keyProperty 设置到目标属性上就OK了-->
    <!--id	命名空间中的唯一标识符，可被用来代表这条语句。-->
    <!--parameterType	将要传入语句的参数的完全限定类名或别名。这个属性是可选的，因为 MyBatis 可以通过 TypeHandler 推断出具体传入语句的参数，默认值为 unset。-->
    <!--parameterMap	这是引用外部 parameterMap 的已经被废弃的方法。使用内联参数映射和 parameterType 属性。-->
    <!--flushCache	将其设置为 true，任何时候只要语句被调用，都会导致本地缓存和二级缓存都会被清空，默认值：true（对应插入、更新和删除语句）。-->
    <!--timeout	这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为 unset（依赖驱动）。-->
    <!--statementType	STATEMENT，PREPARED 或 CALLABLE 的一个。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。-->
    <!--useGeneratedKeys	（仅对 insert 和 update 有用）这会令 MyBatis 使用 JDBC 的 getGeneratedKeys 方法来取出由数据库内部生成的主键（比如：像 MySQL 和 SQL Server 这样的关系数据库管理系统的自动递增字段），默认值：false。-->
    <!--keyProperty	（仅对 insert 和 update 有用）唯一标记一个属性，MyBatis 会通过 getGeneratedKeys 的返回值或者通过 insert 语句的 selectKey 子元素设置它的键值，默认：unset。如果希望得到多个生成的列，也可以是逗号分隔的属性名称列表。-->
    <!--keyColumn	（仅对 insert 和 update 有用）通过生成的键值设置表中的列名，这个设置仅在某些数据库（像 PostgreSQL）是必须的，当主键列不是表中的第一列的时候需要设置。如果希望得到多个生成的列，也可以是逗号分隔的属性名称列表。-->
    <!--databaseId	如果配置了 databaseIdProvider，MyBatis 会加载所有的不带 databaseId 或匹配当前 databaseId 的语句；如果带或者不带的语句都有，则不带的会被忽略。-->
    <insert id="insertContent" parameterType="Content" useGeneratedKeys="true" keyProperty="id">
        insert into liwy_content
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                `id`,
            </if>
            <if test="channelId != null">
                `channel_id`,
            </if>
            <if test="userId != null">
                `user_id`,
            </if>
            <if test="tex != null">
                `tex`,
            </if>
            <if test="createBy != null">
                `create_by`,
            </if>
            <if test="createTime != null">
                `create_time`,
            </if>
            <if test="updateBy != null">
                `update_by`,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id, jdbcType=BIGINT},
            </if>
            <if test="channelId != null">
                #{channelId, jdbcType=INTEGER},
            </if>
            <if test="userId != null">
                #{userId, jdbcType=BIGINT},
            </if>
            <if test="tex != null">
                #{tex, jdbcType=LONGVARCHAR},
            </if>
            <if test="createBy != null">
                #{createBy, jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                #{createTime, jdbcType=TIMESTAMP},
            </if>
            <if test="updateBy != null">
                #{updateBy, jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>

    <!--对于不支持自动生成类型的数据库或可能不支持自动生成主键的 JDBC 驱动，MyBatis 有另外一种方法来生成主键。-->
    <!--selectKey标签：-->
    <!--keyProperty	selectKey 语句结果应该被设置的目标属性。如果希望得到多个生成的列，也可以是逗号分隔的属性名称列表。-->
    <!--keyColumn	匹配属性的返回结果集中的列名称。如果希望得到多个生成的列，也可以是逗号分隔的属性名称列表。-->
    <!--resultType	结果的类型。MyBatis 通常可以推算出来，但是为了更加确定写上也不会有什么问题。MyBatis 允许任何简单类型用作主键的类型，包括字符串。如果希望作用于多个生成的列，则可以使用一个包含期望属性的 Object 或一个 Map。-->
    <!--order	这可以被设置为 BEFORE 或 AFTER。如果设置为 BEFORE，那么它会首先选择主键，设置 keyProperty 然后执行插入语句。如果设置为 AFTER，那么先执行插入语句，然后是 selectKey 元素 - 这和像 Oracle 的数据库相似，在插入语句内部可能有嵌入索引调用。-->
    <!--statementType	与前面相同，MyBatis 支持 STATEMENT，PREPARED 和 CALLABLE 语句的映射类型，分别代表 PreparedStatement 和 CallableStatement 类型。-->

    <!--一个配置了“_databaseId”变量的 databaseIdProvider 可用于动态代码中，这样就可以根据不同的数据库厂商构建特定的语句。-->
    <!--如果配置了databaseIdProvider标签_databaseId 就是代表当前数据库的别名Oracle-->
    <insert id="insertContentAndId" parameterType="Content">
        <selectKey keyProperty="id" resultType="long" order="BEFORE">
            <if test="_databaseId == 'oracle'">
                select seq_users.nextval from dual
            </if>
            <if test="_databaseId == 'db2'">
                select nextval for seq_users from sysibm.sysdummy1"
            </if>
            <if test="_databaseId == 'mysql'">
                select CAST(RAND()*100000000 as signed)
            </if>
        </selectKey>
        insert into liwy_content
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                `id`,
            </if>
            <if test="channelId != null">
                `channel_id`,
            </if>
            <if test="userId != null">
                `user_id`,
            </if>
            <if test="tex != null">
                `tex`,
            </if>
            <if test="createBy != null">
                `create_by`,
            </if>
            <if test="createTime != null">
                `create_time`,
            </if>
            <if test="updateBy != null">
                `update_by`,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id, jdbcType=BIGINT},
            </if>
            <if test="channelId != null">
                #{channelId, jdbcType=INTEGER},
            </if>
            <if test="userId != null">
                #{userId, jdbcType=BIGINT},
            </if>
            <if test="tex != null">
                #{tex, jdbcType=LONGVARCHAR},
            </if>
            <if test="createBy != null">
                #{createBy, jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                #{createTime, jdbcType=TIMESTAMP},
            </if>
            <if test="updateBy != null">
                #{updateBy, jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>

    <insert id="batchInsertContent" parameterType="list" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO liwy_content (
        `channel_id`,
        `user_id`,
        `tex`,
        `create_by`,
        `create_time`,
        `update_by`
        ) VALUES
        <foreach item="item" collection="list" separator=",">
            (
            #{item.channelId, jdbcType=INTEGER},
            #{item.userId, jdbcType=BIGINT},
            #{item.tex, jdbcType=LONGVARCHAR},
            #{item.createBy, jdbcType=VARCHAR},
            #{item.createTime, jdbcType=TIMESTAMP},
            #{item.updateBy, jdbcType=VARCHAR}
            )
        </foreach>

    </insert>

    <!--参数符号(#),这就告诉 MyBatis 创建一个预处理语句参数，通过 JDBC，这样的一个参数在 SQL 中会由一个“?”来标识，并被传递到一个新的预处理语句中-->
    <!--默认情况下,使用 #{} 格式的语法会导致 MyBatis 创建 PreparedStatement 参数并安全地设置参数（就像使用 ? 一样）。这样做更安全，更迅速，通常也是首选做法，-->
    <!--不过有时你就是想直接在 SQL 语句中插入一个不转义的字符串。比如，像 ORDER BY，你可以这样来使用：-->
    <!--ORDER BY ${columnName}-->
    <update id="deleteContent" parameterType="long">
        UPDATE liwy_content
        SET is_deleted = 1
        WHERE id = #{id, jdbcType=BIGINT}
    </update>

    <delete id="deleteContentReal" parameterType="long">
        DELETE FROM liwy_content
        WHERE id = #{id, jdbcType=BIGINT}
    </delete>

    <update id="updateContent">
        update liwy_content
        <!--set 元素会动态前置 SET 关键字，同时也会删掉无关的逗号，因为用了条件语句之后很可能就会在生成的 SQL 语句的后面留下这些逗号。-->
        <set>
            <if test="content.channelId != null">
                `channel_id` = #{content.channelId, jdbcType=INTEGER},
            </if>
            <if test="content.userId != null">
                `user_id` = #{content.userId, jdbcType=BIGINT},
            </if>
            <if test="content.tex != null">
                `tex` = #{content.tex, jdbcType=LONGVARCHAR},
            </if>
            <if test="content.updateBy != null">
                `update_by` = #{content.updateBy, jdbcType=VARCHAR},
            </if>
        </set>
        <!--where 元素只会在至少有一个子元素的条件返回 SQL 子句的情况下才去插入“WHERE”子句。而且，若语句的开头为“AND”或“OR”，where 元素也会将它们去除。-->
        <where>
            <if test="param.id != null">
                and `id` = #{param.id, jdbcType=BIGINT}
            </if>
            <if test="param.channelId != null">
                and `channel_id` = #{content.channelId, jdbcType=INTEGER}
            </if>
            <if test="param.userId != null">
                and `user_id` = #{content.userId, jdbcType=BIGINT}
            </if>
            <if test="param.createBy != null and param.createBy != ''">
                and `create_by` = #{content.createBy, jdbcType=VARCHAR}
            </if>
            <if test="param.updateBy != null and param.updateBy != ''">
                and `update_by` = #{content.updateBy, jdbcType=VARCHAR}
            </if>
        </where>
        <!--如果where与set元素不满足你的需求，可以使用trim元素自定义-->
        <!--<trim prefix="WHERE" prefixOverrides="AND |OR "></trim>-->
        <!--<trim prefix="SET" suffixOverrides=","></trim>-->
    </update>

    <update id="batchUpdateContent" parameterType="list">
        <foreach collection="list" index="index" item="item" open="" close="" separator=";">
            update liwy_content
            <set>
                <if test="item.channelId != null">
                    `channel_id` = #{item.channelId, jdbcType=INTEGER},
                </if>
                <if test="item.userId != null">
                    `user_id` = #{item.userId, jdbcType=BIGINT},
                </if>
                <if test="item.tex != null">
                    `tex` = #{item.tex, jdbcType=LONGVARCHAR},
                </if>
                <if test="item.updateBy != null">
                    `update_by` = #{item.updateBy, jdbcType=VARCHAR},
                </if>
            </set>
            where `id` = #{item.id, jdbcType=BIGINT}
        </foreach>
    </update>

    <!--id	在命名空间中唯一的标识符，可以被用来引用这条语句。-->
    <!--parameterType	将会传入这条语句的参数类的完全限定名或别名。这个属性是可选的，因为 MyBatis 可以通过 TypeHandler 推断出具体传入语句的参数，默认值为 unset。-->
    <!--parameterMap	这是引用外部 parameterMap 的已经被废弃的方法。使用内联参数映射和 parameterType 属性。-->
    <!--resultType	从这条语句中返回的期望类型的类的完全限定名或别名。注意如果是集合情形，那应该是集合可以包含的类型，而不能是集合本身。使用 resultType 或 resultMap，但不能同时使用。-->
    <!--resultMap	外部 resultMap 的命名引用。结果集的映射是 MyBatis 最强大的特性，对其有一个很好的理解的话，许多复杂映射的情形都能迎刃而解。使用 resultMap 或 resultType，但不能同时使用。-->
    <!--flushCache	将其设置为 true，任何时候只要语句被调用，都会导致本地缓存和二级缓存都会被清空，默认值：false。-->
    <!--useCache	将其设置为 true，将会导致本条语句的结果被二级缓存，默认值：对 select 元素为 true。-->
    <!--timeout	这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为 unset（依赖驱动）。-->
    <!--fetchSize	这是尝试影响驱动程序每次批量返回的结果行数和这个设置值相等。默认值为 unset（依赖驱动）。-->
    <!--statementType	STATEMENT，PREPARED 或 CALLABLE 的一个。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。-->
    <!--resultSetType	FORWARD_ONLY，SCROLL_SENSITIVE 或 SCROLL_INSENSITIVE 中的一个，默认值为 unset （依赖驱动）。-->
    <!--databaseId	如果配置了 databaseIdProvider，MyBatis 会加载所有的不带 databaseId 或匹配当前 databaseId 的语句；如果带或者不带的语句都有，则不带的会被忽略。-->
    <!--resultOrdered	这个设置仅针对嵌套结果 select 语句适用：如果为 true，就是假设包含了嵌套结果集或是分组了，这样的话当返回一个主结果行的时候，就不会发生有对前面结果集的引用的情况。这就使得在获取嵌套的结果集的时候不至于导致内存不够用。默认值：false。-->
    <!--resultSets	这个设置仅对多结果集的情况适用，它将列出语句执行后返回的结果集并每个结果集给一个名称，名称是逗号分隔的。-->
    <select id="selectContent" resultType="Content">
        select
        <include refid="contentBaseFild"/>
        from liwy_content content
        <include refid="contentBoWhere"/>

        <if test="pageable !=null and pageable.offset >= 0 and pageable.pageSize > 0">
            limit ${pageable.offset}, ${pageable.pageSize}
        </if>
    </select>

    <select id="selectContentBo" resultMap="contentBoResultMap">
        SELECT
        <include refid="contentBoFild"/>
        FROM liwy_content content
        LEFT JOIN liwy_channel channel ON channel.id = content.channel_id
        LEFT JOIN liwy_user user ON user.id = content.user_id
        <include refid="contentBoWhere"/>
    </select>

    <!-- 使用resultType自动映射，要保证字段名与属性名精确匹配;或开启mapUnderscoreToCamelCase -->
    <select id="getContent" resultType="Content" parameterType="long">
        select
        'liwy-nomap' as nomap,
        <include refid="contentBaseFild"/>
        from liwy_content
        where id = #{id, jdbcType=BIGINT}
    </select>

    <!--简单地将所有的列映射到 HashMap 的键上-->
    <select id="getContentMap" resultType="map" parameterType="long">
        select
        <include refid="contentBaseFild"/>
        from liwy_content
        where id = #{id, jdbcType=BIGINT}
    </select>

    <select id="getContentBo" resultMap="contentBoResultMap" parameterType="long">
        SELECT
        <include refid="contentBoFild"/>
        FROM liwy_content content
        LEFT JOIN liwy_channel channel ON channel.id = content.channel_id
        LEFT JOIN liwy_user user ON user.id = content.user_id
        where content.id = #{id, jdbcType=BIGINT}
    </select>

    <select id="getTagList" resultType="com.liwy.study.mybatis.entity.Tag" parameterType="long">
        SELECT
            tag.id,
            tag.name,
            tag.status
        FROM liwy_content_tag_rel rel, liwy_tag tag
        WHERE rel.tag_id = tag.id AND rel.content_id = #{id, jdbcType=BIGINT}
    </select>

    <sql id="contentBaseFild">
        `id`,
        `channel_id`,
        `user_id`,
        `tex`,
        `create_by`,
        `create_time`,
        `update_by`,
        `update_time`,
        `is_deleted`
    </sql>

    <!--bind 元素可以从 OGNL 表达式中创建一个变量并将其绑定到上下文。-->
    <sql id="contentBoWhere">
        <if test="contentBo.updateBy != null and contentBo.updateBy != ''">
          <bind name="pattern" value="'%' + _parameter.getUpdateBy() + '%'"/>
        </if>
        <where>
            <if test="contentBo.id">
                and content.`id` = #{contentBo.id, jdbcType=BIGINT}
            </if>
            <choose>
                <when test="contentBo.channelId != null">
                    and content.`channel_id` = #{contentBo.channelId, jdbcType=INTEGER}
                </when>
                <when test="contentBo.userId != null">
                    and content.`user_id` = #{contentBo.userId, jdbcType=BIGINT}
                </when>
                <otherwise>
                    and content.`is_deleted` = 0
                </otherwise>
            </choose>
            <if test="contentBo.createBy != null and contentBo.createBy != ''">
                and content.`create_by` like CONCAT('%', #{contentBo.createBy, jdbcType=VARCHAR}, '%')
            </if>
            <if test="contentBo.createTimeStart != null and contentBo.createTimeStart != ''">
                and content.`create_time` <![CDATA[>=]]> #{contentBo.createTimeStart,jdbcType=TIMESTAMP}
            </if>
            <if test="contentBo.createTimeEnd != null and contentBo.createTimeEnd != ''">
                and content.`create_time` <![CDATA[<=]]> #{contentBo.createTimeEnd,jdbcType=TIMESTAMP}
            </if>
            <if test="contentBo.updateBy != null and contentBo.updateBy != ''">
                and content.`update_by` like #{pattern}
            </if>
            <if test="contentBo.idList != null and contentBo.idList.size() > 0">
                <foreach item="item" index="index" collection="contentBo.idList"
                         open="and id in (" separator="," close=")">
                    #{item, jdbcType=BIGINT}
                </foreach>
            </if>
        </where>
    </sql>

    <sql id="contentBoFild">
        content.`id` as c_id,
        content.`channel_id` as c_channel_id,
        content.`user_id` as c_user_id,
        content.`tex` as c_tex,
        content.`create_by` as c_create_by,
        content.`create_time` as c_create_time,
        content.`update_by` as c_update_by,
        content.`update_time` as c_update_time,
        content.`is_deleted` as c_is_deleted,
        channel.`id` as ch_id,
        channel.`parent_id` as ch_parent_id,
        channel.`priority` as ch_priority,
        channel.`name` as ch_name,
        channel.`is_blank` as ch_is_blank,
        user.`id` as u_id,
        user.`username` as u_username,
        user.`sex` as u_sex,
        user.`email` as u_email,
        user.`register_time` as u_register_time,
        user.`status` as u_status
    </sql>

    <!-- 超复杂的 Result Map -->
    <!--id	当前命名空间中的一个唯一标识，用于标识一个result map.-->
    <!--type	类的完全限定名, 或者一个类型别名 (内置的别名可以参考上面的表格).-->
    <!--autoMapping	如果设置这个属性，MyBatis将会为这个ResultMap开启或者关闭自动映射。这个属性会覆盖全局的属性 autoMappingBehavior。默认值为：unset。-->
    <resultMap id="contentBoResultMap" type="ContentBo">
        <!--一个 ID 结果;标记出作为 ID 的结果可以帮助提高整体性能-->
        <id column="c_id" property="id" jdbcType="BIGINT"/>
        <!--注入到字段或 JavaBean 属性的普通结果-->
        <!--property	映射到列结果的字段或属性。如果用来匹配的 JavaBeans 存在给定名字的属性，那么它将会被使用。否则 MyBatis 将会寻找给定名称 property 的字段。 无论是哪一种情形，你都可以使用通常的点式分隔形式进行复杂属性导航。比如,你可以这样映射一些简单的东西: “username” ,或者映射到一些复杂的东西: “address.street.number” 。-->
        <!--column	数据库中的列名,或者是列的别名。一般情况下，这和 传递给 resultSet.getString(columnName) 方法的参数一样。-->
        <!--javaType	一个 Java 类的完全限定名,或一个类型别名(参考上面内建类型别名 的列表) 。如果你映射到一个 JavaBean,MyBatis 通常可以断定类型。 然而,如果你映射到的是 HashMap,那么你应该明确地指定 javaType 来保证期望的行为。-->
        <!--jdbcType	JDBC 类型，所支持的 JDBC 类型参见这个表格之后的“支持的 JDBC 类型”。 只需要在可能执行插入、更新和删除的允许空值的列上指定 JDBC 类型。这是 JDBC 的要求而非 MyBatis 的要求。如果你直接面向 JDBC 编程,你需要对可能为 null 的值指定这个类型。-->
        <!--typeHandler	我们在前面讨论过的默认类型处理器。使用这个属性,你可以覆盖默 认的类型处理器。这个属性值是一个类型处理 器实现类的完全限定名，或者是类型别名。-->
        <result column="c_channel_id" property="channelId" jdbcType="INTEGER"/>
        <result column="c_user_id" property="userId" jdbcType="BIGINT"/>
        <result column="c_tex" property="tex" jdbcType="LONGVARCHAR"/>
        <result column="c_create_by" property="createBy" jdbcType="VARCHAR"/>
        <result column="c_create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="c_update_by" property="updateBy" jdbcType="VARCHAR"/>
        <result column="c_update_time" property="updateTime" jdbcType="TIMESTAMP"/>
        <result column="c_is_deleted" property="isDeleted" jdbcType="TINYINT"/>

        <!--一个复杂类型的关联;许多结果将包装成这种类型-->
        <!--column	来自数据库的列名,或重命名的列标签。这和通常传递给 resultSet.getString(columnName)方法的字符串是相同的。 column 注 意 : 要 处 理 复 合 主 键 , 你 可 以 指 定 多 个 列 名 通 过 column= ” {prop1=col1,prop2=col2} ” 这种语法来传递给嵌套查询语 句。这会引起 prop1 和 prop2 以参数对象形式来设置给目标嵌套查询语句。-->
        <!--select	另外一个映射语句的 ID,可以加载这个属性映射需要的复杂类型。获取的 在列属性中指定的列的值将被传递给目标 select 语句作为参数。表格后面 有一个详细的示例。 select 注 意 : 要 处 理 复 合 主 键 , 你 可 以 指 定 多 个 列 名 通 过 column= ” {prop1=col1,prop2=col2} ” 这种语法来传递给嵌套查询语 句。这会引起 prop1 和 prop2 以参数对象形式来设置给目标嵌套查询语句。-->
        <!--fetchType	可选的。有效值为 lazy和eager。 如果使用了，它将取代全局配置参数lazyLoadingEnabled。-->
        <association property="channel" javaType="com.liwy.study.mybatis.entity.Channel">
            <id column="ch_id" property="id" jdbcType="INTEGER"/>
            <result column="ch_parent_id" property="parentId" jdbcType="INTEGER"/>
            <result column="ch_priority" property="priority" jdbcType="INTEGER"/>
            <result column="ch_name" property="name" jdbcType="VARCHAR"/>
            <result column="ch_is_blank" property="isBlank" jdbcType="TINYINT"/>
        </association>

        <association property="author" javaType="com.liwy.study.mybatis.entity.User">
            <id column="u_id" property="id" jdbcType="BIGINT"/>
            <result column="u_username" property="username" jdbcType="VARCHAR"/>
            <result column="u_sex" property="sex" jdbcType="TINYINT"/>
            <result column="u_email" property="email" jdbcType="VARCHAR"/>
            <result column="u_register_time" property="registerTime" jdbcType="TIMESTAMP"/>
            <result column="u_status" property="status" jdbcType="TINYINT"/>
        </association>

        <!--一个复杂类型的集合-->
        <!--注意那个新的“ofType”属性。这个属性用来区分 JavaBean(或字段)属性类型和集合包含的类型来说是很重要的-->
        <collection property="tagList" ofType="com.liwy.study.mybatis.entity.Tag" select="getTagList" column="c_id">
            <!--<id property="id" column="post_id"/>-->
            <!--<result property="subject" column="post_subject"/>-->
            <!--<collection property="tags" ofType="Tag" >-->
            <!--<id property="id" column="tag_id"/>-->
            <!--</collection>-->
            <!--使用结果值来决定使用哪个 resultMap-->
            <!--有时一个单独的数据库查询也许返回很多不同 (但是希望有些关联) 数据类型的结果集。 鉴别器元素就是被设计来处理这个情况的, 还有包括类的继承层次结构。 -->
            <!--鉴别器非常容易理 解,因为它的表现很像 Java 语言中的 switch 语句。-->
            <!--<discriminator javaType="int" column="draft">-->
            <!--<case value="1" resultType="DraftPost"/>-->
            <!--</discriminator>-->
        </collection>

    </resultMap>

    <!-- 调用存储过程查询多结果集 -->
    <!-- 缓存不支持带有out参数的存储过程，所以需要关闭缓存 -->
    <select id="getEntityCount" parameterType="ContentBo"
            statementType="CALLABLE" useCache="false">
        CALL procGetEntityCount(#{channelId, jdbcType=INTEGER,mode=IN},
                                #{contentBo.contentNum, jdbcType=BIGINT, mode=OUT},
                                #{contentBo.tagNum, jdbcType=BIGINT, mode=OUT})
    </select>
    <resultMap id="channel" type="com.liwy.study.mybatis.entity.Channel">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="parent_id" property="parentId" jdbcType="INTEGER" />
        <result column="priority" property="priority" jdbcType="INTEGER" />
        <result column="name" property="name" jdbcType="VARCHAR" />
        <result column="is_blank" property="isBlank" jdbcType="TINYINT" />
    </resultMap>
    <resultMap id="tag" type="com.liwy.study.mybatis.entity.Tag">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="name" property="name" jdbcType="VARCHAR" />
        <result column="status" property="status" jdbcType="TINYINT" />
    </resultMap>
    <select id="queryChannelTag" statementType="CALLABLE" resultMap="channel,tag">
        CALL procQueryChannelTag()
    </select>
    <select id="queryChannelTag2" statementType="CALLABLE" resultMap="channel,tag">
        SELECT * FROM liwy_channel;
        SELECT * FROM liwy_tag;
    </select>


    <!--======================================================================-->
    <!--=======================  Parameters 参数   ===========================-->
    <!--======================================================================-->

    <!--参数也可以指定一个特殊的数据类型。-->
    <!--#{property,javaType=int,jdbcType=NUMERIC}-->
    <!--也可以指定一个特殊的类型处理器类-->
    <!--#{age,javaType=int,jdbcType=NUMERIC,typeHandler=MyTypeHandler}-->
    <!--对于数值类型，还有一个小数保留位数的设置，来确定小数点后保留的位数。-->
    <!--#{height,javaType=double,jdbcType=NUMERIC,numericScale=2}-->
    <!--mode 属性允许你指定 IN，OUT 或 INOUT 参数。如果参数为 OUT 或 INOUT，参数对象属性的真实值将会被改变，-->
    <!--就像你在获取输出参数时所期望的那样。如果 mode 为 OUT（或 INOUT），而且 jdbcType 为 CURSOR(也就是 Oracle 的 REFCURSOR)，-->
    <!--你必须指定一个 resultMap 来映射结果集 ResultMap 到参数类型。要注意这里的 javaType 属性是可选的，-->
    <!--如果留空并且 jdbcType 是 CURSOR，它会被自动地被设为 ResultMap。-->
    <!--#{department, mode=OUT, jdbcType=CURSOR, javaType=ResultSet, resultMap=departmentResultMap}-->

</mapper>